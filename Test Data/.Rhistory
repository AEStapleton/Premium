system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%
for(j in 1:5373){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))})
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))}})
zip
install.packages("doRedis")
library("doParallel", lib.loc="~/R/win-library/3.2")
library("doRedis", lib.loc="~/R/win-library/3.2")
library("foreach", lib.loc="~/R/win-library/3.2")
library("cluster", lib.loc="C:/Program Files/R/R-3.2.0/library")
library("parallel", lib.loc="C:/Program Files/R/R-3.2.0/library")
registerDoRedis(queue='jobs')
registerDoRedis(queue='jobs',host="localhost",port=6379)
registerDoRedis('jobs')
require('doRedis')
registerDoRedis('jobs')
require('doRedis')
registerDoRedis('jobs')
registerDoRedis
detach("package:doParallel", unload=TRUE)
registerDoRedis('jobs')
library("doRedis", lib.loc="~/R/win-library/3.2")
registerDoRedis('jobs')
require('doRedis')
registerDoRedis('jobs')
removeQueue('jobs')
?redisConnect
redisConnect()
con<redisConnect()
con<-redisConnect()
redisSet("x",rnorm(5))
library("doRedis", lib.loc="~/R/win-library/3.2")
redisConnect()
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(200)
setChunkSize(250)
stdout()
redisConnect()
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(200)
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}})
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
fraudulent_rewards <- read.csv("~/R/Data/OT1/Working Data/fraudulent_rewards.csv", stringsAsFactors=FALSE)
View(fraudulent_rewards)
splits <- read.csv("~/R/Data/OT1/Working Data/tech-adj split.csv", stringsAsFactors=FALSE)
View(splits)
redisConnect()
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(200)
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}})
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
redisConnect()
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(250)
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}})
?sprintf
traceback(
redisConnect()
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(250)
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}}))
?traceback
traceback(
redisConnect()
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(250)
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}}))
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs')
traceback(
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(250)
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}}))
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
?debug
registerDoRedis('jobs')
startLocalWorkers(n=1,'jobs')
setChunkSize(250)
traceback(
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}}))
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
system.time
startLocalWorkers
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=1,'jobs',host="localhost",port=6379)
setChunkSize(250)
traceback(
system.time({
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}}))
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=1,'jobs',host="localhost",port=6379)
setChunkSize(250)
traceback(
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}})
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=1,'jobs',host="localhost",port=6379)
setChunkSize(250)
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis
setChunkSize
startLocalWorkers(n=1,'jobs',host="localhost",port=6379)
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=2,queue'jobs',host="localhost",port=6379)
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=2,queue='jobs',host="localhost",port=6379)
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
removeQueue('jobs')
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=2,queue='jobs',host="localhost",port=6379)
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs')
startLocalWorkers(n=2,queue='jobs')
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis("jobs")
startLocalWorkers(n=2,queue="jobs")
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
require('doRedis')
registerDoRedis('jobs')
startLocalWorkers(n=2, queue='jobs')
print(getDoParWorkers())
foreach(j=1:10,.combine=sum,.multicombine=TRUE) %dopar%
4*sum((runif(1000000)^2 + runif(1000000)^2)<1)/10000000
removeQueue('jobs')
library("doRedis", lib.loc="~/R/win-library/3.2")
require('doRedis')
registerDoRedis("jobs")
startLocalWorkers(n=2,queue="jobs")
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
install.packages("quantmod")
library("quantmod", lib.loc="~/R/win-library/3.2")
AAPL.OPT <- getOptionChain("AAPL")
require("quantmod")
install.packages("xts")
require(quantmod)
AAPL.OPT <- getOptionChain("AAPL")
AAPL.OPT
plot(AAPL.OPT[,1],AAPL.OPT[,2])
class(AAPL.OPT)
head(AAPL.OPT)
AAPL.OPT[[1]]
AAPL.OPT[[1]][,1]
plot(AAPL.OPT[[1]][,1],AAPL.OPT[[1]][,2])
require('quantmod')
require(quantmod)
library(quantmod)
library('quantmod')
library("quantmod")
library("quantmod", lib.loc="~/R/win-library/3.2")
detach("package:quantmod", unload=TRUE)
require('quantmod')
getSymbols.yahoo('SPX')
getSymbols.yahoo('SPDR')
(62+63)/2
(62*63)/2
death <- read.csv("~/R/Data/OT1/Working Data/death.csv")
View(death)
colnames(death)
X<-as.data.frame(cbind(death[,10:67]))
colnames(X)
X<-cbind(X,death[,c(73,84,85,87,88)])
colnames(X)
dim(X)
63*64/2
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,bycol=T))
for(i in 1:62){
for(j in 2:62){
interactions[1:24911,]<-X[,i]*X[,j]
}}
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,byrow=FALSE))
for(i in 1:62){
for(j in 2:62){
interactions[1:24911,]<-X[,i]*X[,j]
}}
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,bycol=T))
for(i in 1:62){
for(j in 2:63){
interactions[1:24911,]<-as.numeric(X[,i])*as.numeric(X[,j])
}}
head(interactions[,1])
count(interactions[,1])
require(plyr)
count(interactions[,1])
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,bycol=T))
for(i in 1:62){
for(j in 2:63){
interactions[1:24911,]<-as.numeric(X[,i])*as.numeric(X[,j])
}}
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,byrow=FALSE))
for(i in 1:62){
for(j in 2:63){
interactions[1:24911,]<-as.numeric(X[,i])*as.numeric(X[,j])
}}
require(doParallel)
detectCores()
cl<-makeCluster(4)
registerDoParallel(cl)
getDoParWorkers()
interactions<-vector(length=24911)
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.data.frame(cbind(interactions,as.numeric(X[,i])*as.numeric(X[,j])))
}}
intset<-as.data.frame(as.numeric(X[,1])*as.numeric(X[,1]))
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
int.set<-as.data.frame(cbind(int.set,interactions))
}}
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
intset<-as.data.frame(cbind(intset,interactions))
}}
intset<-as.data.frame(as.numeric(X[,1])*as.numeric(X[,1]))
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
int.set<-c(cbind(int.set,interactions))
}}
intset<-as.data.frame(as.numeric(X[,1])*as.numeric(X[,1]))
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
intset<-c(cbind(intset,interactions))
}}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.2")
install.packages(installr)
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
require(installr)
updateR()
require(dplyr)
library(dplyr)
library("dplyr", lib.loc="~/R/win-library/3.2")
library("PReMiuM", lib.loc="~/R/win-library/3.2")
inputs <- generateSampleDataFile(clusSummaryPoissonDiscrete())
head(inputs)
runInfoObj<-profRegr(yModel=inputs$yModel,
xModel=inputs$xModel, nSweeps=10, nClusInit=20,
nBurn=20, data=inputs$inputData, output="output",
covNames = inputs$covNames, outcomeT = inputs$outcomeT,
fixedEffectsNames = inputs$fixedEffectNames)
class(runInfoObj)
runInfoObj[[1]]
runInfoObj[[2]]
runInfoObj[[3]]
runInfoObj[[4]]
runInfoObj[[]]
runInfoObj
dissimObj<-calcDissimilarityMatrix(runInfoObj)
dissimObj<-calcDissimilarityMatrix(runInfoObj)
clusObj<-calcOptimalClustering(dissimObj)
riskProfileObj<-calcAvgRiskAndProfile(clusObj)
calcAvgRiskAndProfile
clusterOrderObj<-plotRiskProfile(riskProfileObj,"summary.png")
getwd()
install.packages("RNECP")
install.packages("RNCEP")
library("RNCEP", lib.loc="~/R/win-library/3.2")
install.packages("RODBC")
library("RODBC", lib.loc="~/R/win-library/3.2")
conn = odbcConnectExcel("myfile.xlsx")
install.packages("xlsx")
library("xlsx", lib.loc="~/R/win-library/3.2")
library("rJava", lib.loc="~/R/win-library/3.2")
getwd()
setwd("C:\\Users\\Sean\\Documents\\GitHub\\Premium\\Test Data")
tdata<-read.csv(file.choose())
library("RNCEP", lib.loc="~/R/win-library/3.2")
install.packages("ggmap")
require(ggmap)
library("ggmap", lib.loc="~/R/win-library/3.2")
install.packages("mapproj")
library("ggmap", lib.loc="~/R/win-library/3.2")
attach(tdata)
?sQuote
sQuote(city[1],state[1])
sQuote(paste(city[1],state[1],collapse=","))
read.csv(file.choose())
test_data<-read.csv(file.choose())
attach(test_data)
dim(test_data)
colnames(test_data)[11]<-Loc
colnames(test_data)[11]<-"Loc"
colnames(test_data)
attach(test_data)
Loc[1]
geocode(Loc[1])
detach("package:ggmap", unload=TRUE)
library("ggmap", lib.loc="~/R/win-library/3.2")
install.packages("C:/Users/Sean/Downloads/mapproj_1.2-4.tar.gz", repos = NULL, type = "source")
library(mapproj)
install.packages(mapproj)
