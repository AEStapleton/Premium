foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
removeQueue('jobs')
registerDoRedis('jobs',host="localhost",port=6379)
startLocalWorkers(n=2,queue='jobs',host="localhost",port=6379)
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis('jobs')
startLocalWorkers(n=2,queue='jobs')
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
registerDoRedis("jobs")
startLocalWorkers(n=2,queue="jobs")
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
require('doRedis')
registerDoRedis('jobs')
startLocalWorkers(n=2, queue='jobs')
print(getDoParWorkers())
foreach(j=1:10,.combine=sum,.multicombine=TRUE) %dopar%
4*sum((runif(1000000)^2 + runif(1000000)^2)<1)/10000000
removeQueue('jobs')
library("doRedis", lib.loc="~/R/win-library/3.2")
require('doRedis')
registerDoRedis("jobs")
startLocalWorkers(n=2,queue="jobs")
adjuster<-vector(length=1847)
technician<-vector(length=1847)
zip<-vector(length=1847)
foreach(i =1:1847,.combine=c) %dopar%{
for(j in 1:53730){
if(fraudulent_rewards$Cov_ID[i]==splits$Cov_ID[j]){
adjuster[i]<-splits$Adjuster.ID[i]
technician[i]<-splits$Technician.ID[i]
zip[i]<-splits$Adj_ZIP[i]
}}}
adjdat<-as.data.frame(cbind(adjuster,technician,zip))
fraudtech<-as.data.frame(cbind(fraudulent_rewards,adjdat))
install.packages("quantmod")
library("quantmod", lib.loc="~/R/win-library/3.2")
AAPL.OPT <- getOptionChain("AAPL")
require("quantmod")
install.packages("xts")
require(quantmod)
AAPL.OPT <- getOptionChain("AAPL")
AAPL.OPT
plot(AAPL.OPT[,1],AAPL.OPT[,2])
class(AAPL.OPT)
head(AAPL.OPT)
AAPL.OPT[[1]]
AAPL.OPT[[1]][,1]
plot(AAPL.OPT[[1]][,1],AAPL.OPT[[1]][,2])
require('quantmod')
require(quantmod)
library(quantmod)
library('quantmod')
library("quantmod")
library("quantmod", lib.loc="~/R/win-library/3.2")
detach("package:quantmod", unload=TRUE)
require('quantmod')
getSymbols.yahoo('SPX')
getSymbols.yahoo('SPDR')
(62+63)/2
(62*63)/2
death <- read.csv("~/R/Data/OT1/Working Data/death.csv")
View(death)
colnames(death)
X<-as.data.frame(cbind(death[,10:67]))
colnames(X)
X<-cbind(X,death[,c(73,84,85,87,88)])
colnames(X)
dim(X)
63*64/2
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,bycol=T))
for(i in 1:62){
for(j in 2:62){
interactions[1:24911,]<-X[,i]*X[,j]
}}
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,byrow=FALSE))
for(i in 1:62){
for(j in 2:62){
interactions[1:24911,]<-X[,i]*X[,j]
}}
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,bycol=T))
for(i in 1:62){
for(j in 2:63){
interactions[1:24911,]<-as.numeric(X[,i])*as.numeric(X[,j])
}}
head(interactions[,1])
count(interactions[,1])
require(plyr)
count(interactions[,1])
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,bycol=T))
for(i in 1:62){
for(j in 2:63){
interactions[1:24911,]<-as.numeric(X[,i])*as.numeric(X[,j])
}}
interactions<-as.data.frame(matrix(nrow=24911,ncol=2016,byrow=FALSE))
for(i in 1:62){
for(j in 2:63){
interactions[1:24911,]<-as.numeric(X[,i])*as.numeric(X[,j])
}}
require(doParallel)
detectCores()
cl<-makeCluster(4)
registerDoParallel(cl)
getDoParWorkers()
interactions<-vector(length=24911)
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.data.frame(cbind(interactions,as.numeric(X[,i])*as.numeric(X[,j])))
}}
intset<-as.data.frame(as.numeric(X[,1])*as.numeric(X[,1]))
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
int.set<-as.data.frame(cbind(int.set,interactions))
}}
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
intset<-as.data.frame(cbind(intset,interactions))
}}
intset<-as.data.frame(as.numeric(X[,1])*as.numeric(X[,1]))
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
int.set<-c(cbind(int.set,interactions))
}}
intset<-as.data.frame(as.numeric(X[,1])*as.numeric(X[,1]))
foreach(i = 1:62) %dopar%{
for(j in 2:63){
interactions<-as.numeric(X[,i])*as.numeric(X[,j])
intset<-c(cbind(intset,interactions))
}}
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.2")
install.packages(installr)
install.packages("installr")
library("installr", lib.loc="~/R/win-library/3.2")
require(installr)
updateR()
?system.time
setwd("C:\\Users\\Sean\\Documents\\GitHub\\Premium\\Test Data")
test_data<-read.csv(file.choose(), stringsAsFactors = FALSE)
attach(test_data)
require(ggmap)
require(RNCEP)
library("PReMiuM", lib.loc="~/R/win-library/3.2")
library(plyr)
library(dplyr)
library(tidyr)
system.time(
test_data$district <- tolower(test_data$district)
test_data$district <- gsub('^(southwester)$', 'southwestern', test_data$district)
Loc<-as.character(Loc) # focus on southwestern for now
yield<-as.numeric(substr(yield_bu.A,1,5))
###codes lat/lon for the 32 unique locations that will be assigned to every observation
###geocoding works through google API, and it is much faster to query only as often as is
###absolutely necessary.
unique_gcode<-geocode(unique(Loc))
unique_gcode<-as.data.frame(cbind(as.character(unique(Loc)),unique_gcode))
gcode<-data.frame(Lon=0,Lat=0)
#plant_date<-vector(length=2289)
plant_date <- vector(length=nrow(test_data))
#harvest_date<-vector(length=2289)
harvest_date<-vector(length = nrow(test_data))
)
system.time(
test_data$district <- tolower(test_data$district)
)
system.time(
test_data$district <- tolower(test_data$district)
test_data$district <- gsub('^(southwester)$', 'southwestern', test_data$district)
Loc<-as.character(Loc))
system.time({
test_data$district <- tolower(test_data$district)
test_data$district <- gsub('^(southwester)$', 'southwestern', test_data$district)
Loc<-as.character(Loc)})
system.time({
wx.test<-NCEP.gather(variable=c('air.sig995','lftx.sfc','omega.sig995'),level='surface',
months.minmax = c(5,10),years.minmax = c(2014,2014),
lat.southnorth = c(loc_minmax[3:4]), lon.westeast = c(loc_minmax[1:2]),
reanalysis2 = FALSE, return.units = TRUE)
print("NCEP.GATHER TIME")
)}
system.time({
wx.test<-NCEP.gather(variable=c('air.sig995','lftx.sfc','omega.sig995'),level='surface',
months.minmax = c(5,10),years.minmax = c(2014,2014),
lat.southnorth = c(loc_minmax[3:4]), lon.westeast = c(loc_minmax[1:2]),
reanalysis2 = FALSE, return.units = TRUE)
print("NCEP.GATHER TIME")
})
attach(test_data)
require(ggmap)
require(RNCEP)
library("PReMiuM", lib.loc="~/R/win-library/3.2")
library(plyr)
library(dplyr)
library(tidyr)
test_data$district <- tolower(test_data$district)
test_data$district <- gsub('^(southwester)$', 'southwestern', test_data$district)
Loc<-as.character(Loc) # focus on southwestern for now
yield<-as.numeric(substr(yield_bu.A,1,5))
###codes lat/lon for the 32 unique locations that will be assigned to every observation
###geocoding works through google API, and it is much faster to query only as often as is
###absolutely necessary.
unique_gcode<-geocode(unique(Loc))
unique_gcode<-as.data.frame(cbind(as.character(unique(Loc)),unique_gcode))
gcode<-data.frame(Lon=0,Lat=0)
#plant_date<-vector(length=2289)
plant_date <- vector(length=nrow(test_data))
#harvest_date<-vector(length=2289)
harvest_date<-vector(length = nrow(test_data))
####Assigns geocodes to each observation
#for(i in 1:5){
for(i in 1:length(unique(Loc))){
gcode[which(Loc==unique_gcode[i,1]),]<-unique_gcode[i,2:3]
plant_date[which(Loc==unique_gcode[i,1])]<-as.character(planting[which(Loc==unique_gcode[i,1])])
harvest_date[which(Loc==unique_gcode[i,1])]<-as.character(harvest[which(Loc==unique_gcode[i,1])])
}
Lon_Lat_Loc<-as.data.frame(cbind(gcode,Loc))
Lon_Lat_Loc$Lon <- Lon_Lat_Loc$Lon + 360
Loc_Date<-as.data.frame(cbind(Lon_Lat_Loc,plant_date,harvest_date))
loc_minmax<-c(min(gcode[,1]),max(gcode[,1]),min(gcode[,2]),max(gcode[,2]))
system.time({
wx.test<-NCEP.gather(variable=c('air.sig995','lftx.sfc','omega.sig995'),level='surface',
months.minmax = c(5,10),years.minmax = c(2014,2014),
lat.southnorth = c(loc_minmax[3:4]), lon.westeast = c(loc_minmax[1:2]),
reanalysis2 = FALSE, return.units = TRUE)
print("NCEP.GATHER TIME")
})
system.time({
wx.ag<-NCEP.aggregate(wx.test, YEARS = TRUE, MONTHS = FALSE, DAYS = FALSE,
HOURS = FALSE,fxn='mean')
print("NCEP.aggregate time")
})
detach(test_data)
metrics <- c('air.sig995')
system.time({
for (i in 1:length(metrics)) {
loc_minmax<-c(min(gcode[,1]),max(gcode[,1]),min(gcode[,2]),max(gcode[,2]))
wx.test<-NCEP.gather(variable= metrics[i],level='surface',
months.minmax = c(5,10),years.minmax = c(2014,2014),
lat.southnorth = c(loc_minmax[3:4]), lon.westeast = c(loc_minmax[1:2]),
reanalysis2 = FALSE, return.units = TRUE)
wx.ag<-NCEP.aggregate(wx.test, YEARS = TRUE, MONTHS = FALSE, DAYS = FALSE,
HOURS = FALSE,fxn='mean')
wx.df <- NCEP.array2df(wx.ag)
colnames(wx.df)[4] <- metrics[[i]]
if (i == 1 ) wx.output <- wx.df
if (i > 1) wx.output <-as.data.frame(cbind(wx.output, wx.df[4]))
}
print("RUNTIME")})
roundTo <- function(x, y){
#  which.min(abs(y - x))
#rounded_x = vector(length = length(x))
return(y[which.min(abs(y - x))])
}
Lon_Lat_Loc$Lon2 <- unlist(lapply(Lon_Lat_Loc[,1], function(x) roundTo(x, seq(min(wx.output$longitude), max(wx.output$longitude), 2.5))))
Lon_Lat_Loc$Lat2 <- unlist(lapply(Lon_Lat_Loc[,2], function(x) roundTo(x, seq(min(wx.output$latitude), max(wx.output$latitude), 2.5))))
wx.ag2 <- wx.output %>%
select(-datetime) %>%
rename(Lat2 = latitude,
Lon2 = longitude)
Lon_Lat_Loc$Loc <- as.character(Lon_Lat_Loc$Loc)
# Becareful with duplicate rows after joining to test_data2
inputData <- Lon_Lat_Loc %>%
inner_join(., wx.ag2, by=c('Lat2', 'Lon2')) %>%
distinct() %>%
inner_join(., test_data, by = 'Loc') %>%
mutate(yield = yield_bu.A,
yield = as.numeric(gsub('\\*', '', yield)))
finalInput <- inputData[c('yield','Loc','brand_hybrid', metrics)]
## Using Prof Reg
covName <- names(finalInput[2:length(finalInput)])
numericVars <- which(sapply(finalInput, class)=='numeric' & names(finalInput) != 'yield')
categoricalVars <- which(sapply(finalInput, class)=='character' & names(finalInput) != 'yield')
system.time({
mod <- profRegr(covName, outcome = 'yield',
yModel = 'Normal', xModel = "Mixed",
#nCovariates = 2,
#fixedEffectsNames = 'yield',
discreteCovs = c(names(finalInput[categoricalVars])),
continuousCovs = c(names(finalInput[numericVars])),
data = finalInput)
print("MODEL TIME")
})
555.06/60
.251*60
system.time({
calcDists <- calcDissimilarityMatrix(mod)
print("DissimilarityMatrix time")
})
system.time({
clusts <- calcOptimalClustering(calcDists)
print("Optimal Clustering Time")
})
system.time({
riskProfileOb <- calcAvgRiskAndProfile(clusts)
print("AvgRiskAndProfile time"))}
system.time({
riskProfileOb <- calcAvgRiskAndProfile(clusts)
print("AvgRiskAndProfile time")})
?plotRiskProfile
str(clusts)
unique(Loc)
unique(Lon_Lat_Loc$Lon2)
unique(Lon_Lat_Loc$Lat2)
system.time({
plotRiskProfile(riskProfileOb, outFile = "summary1.png")
print("plot time")})
83650/60
1394.167/60
.23612*60
.1672*60
finalInput <- inputData[c('yield','brand_hybrid', metrics)]
covName <- names(finalInput[2:length(finalInput)])
metrics <- c('air.sig995','lftx.sfc','omega.sig995')
for (i in 1:length(metrics)) {
loc_minmax<-c(min(gcode[,1]),max(gcode[,1]),min(gcode[,2]),max(gcode[,2]))
wx.test<-NCEP.gather(variable= metrics[i],level='surface',
months.minmax = c(5,10),years.minmax = c(2014,2014),
lat.southnorth = c(loc_minmax[3:4]), lon.westeast = c(loc_minmax[1:2]),
reanalysis2 = FALSE, return.units = TRUE)
wx.ag<-NCEP.aggregate(wx.test, YEARS = TRUE, MONTHS = FALSE, DAYS = FALSE,
HOURS = FALSE,fxn='mean')
wx.df <- NCEP.array2df(wx.ag)
colnames(wx.df)[4] <- metrics[[i]]
if (i == 1 ) wx.output <- wx.df
if (i > 1) wx.output <-as.data.frame(cbind(wx.output, wx.df[4]))
}
## Function to round lon/lat
roundTo <- function(x, y){
#  which.min(abs(y - x))
#rounded_x = vector(length = length(x))
return(y[which.min(abs(y - x))])
}
Lon_Lat_Loc$Lon2 <- unlist(lapply(Lon_Lat_Loc[,1], function(x) roundTo(x, seq(min(wx.output$longitude), max(wx.output$longitude), 2.5))))
Lon_Lat_Loc$Lat2 <- unlist(lapply(Lon_Lat_Loc[,2], function(x) roundTo(x, seq(min(wx.output$latitude), max(wx.output$latitude), 2.5))))
wx.ag2 <- wx.output %>%
select(-datetime) %>%
rename(Lat2 = latitude,
Lon2 = longitude)
## Merge Lon_Lat_Loc to wx.ag2
## also, merge that do test_data
#test_data2 <- test_data[1:222,]
#test_data2$Loc <- as.character(test_data2$Loc)
Lon_Lat_Loc$Loc <- as.character(Lon_Lat_Loc$Loc)
# Becareful with duplicate rows after joining to test_data2
inputData <- Lon_Lat_Loc %>%
inner_join(., wx.ag2, by=c('Lat2', 'Lon2')) %>%
distinct() %>%
inner_join(., test_data, by = 'Loc') %>%
mutate(yield = yield_bu.A,
yield = as.numeric(gsub('\\*', '', yield)))
##
##
## Now, try to get the data into profRegr
##
## covariate: yearly.avg
## outcome: yield
##
##
## create data frame with ONLY variables of interest
finalInput <- inputData[c('yield','brand_hybrid', metrics)]
## Using Prof Reg
covName <- names(finalInput[2:length(finalInput)])
## determine numeric variables
numericVars <- which(sapply(finalInput, class)=='numeric' & names(finalInput) != 'yield')
categoricalVars <- which(sapply(finalInput, class)=='character' & names(finalInput) != 'yield')
system.time({
mod <- profRegr(covName, outcome = 'yield',
yModel = 'Normal', xModel = "Mixed",
#nCovariates = 2,
#fixedEffectsNames = 'yield',
discreteCovs = c(names(finalInput[categoricalVars])),
continuousCovs = c(names(finalInput[numericVars])),
data = finalInput)
print("MODEL TIME")
})
# dissimilarity Matrix
system.time({
calcDists <- calcDissimilarityMatrix(mod)
print("DissimilarityMatrix time")
})
system.time({
clusts <- calcOptimalClustering(calcDists)
print("Optimal Clustering Time")
})
system.time({
riskProfileOb <- calcAvgRiskAndProfile(clusts)
print("AvgRiskAndProfile time")})
metrics
c(metrics)
system.time({
plotRiskProfile(riskProfileOb, outFile = "summary1.png",whichCovariates = metrics)
print("plot time")})
getwd()
plotRiskProfile(riskProfileOb, outFile = "summary2.png",whichCovariates = metrics)
?scatter.matrix
??scatter.matrix
?plot.matrix
install.packages("plotly")
ploy<-plotly()
??plotly
library(plotly)
install.packages(plotly)
install.packages("plotly")
install.packages("viridis") # dependency
install.packages("devtools")
devtools::install_github("ropensci/plotly")
signup()
require(plotly)
plotly:::verify("skosowsky")
ploy<-plotly()
help("signup",package="plotly")
signup(skosowsky,save=TRUE)
signup(skosowsky,sakosows@ncsu.edu,save=TRUE)
signup("skosowsky","sakosows@ncsu.edu",save=TRUE)
require(plotly)
signup("skosowsky","sakosows@ncsu.edu",save=TRUE)
require(curl)
library("curl", lib.loc="~/R/win-library/3.2")
signup("skosowsky","sakosows@ncsu.edu",save=TRUE)
library(curl)
detach("package:curl", unload=TRUE)
library("curl", lib.loc="~/R/win-library/3.2")
detach("package:curl", unload=TRUE)
library("curl", lib.loc="~/R/win-library/3.2")
?plotly
plotly("skosowsky")
help(signup,package='plotly')
Sys.setenv("plotly_username" = "skosowsky")
Sys.setenv("skosowsky" = "me")
Sys.setenv("7382" = "mykey")
plotly(skosowsky,7382)
plotly("skosowsky",7382)
help("Deprecated")
plotly:::verify("skosowskt")
plotly:::verify("skosowsky")
plotly()
require(plotly)
ploy<-plotly()
ploy<-plotly("skosowsky",7382)
ploy<-plotly("skosowsky","7382")
Sys.setenv("plotly_username"="skosowsky")
Sys.setenv("plotly_api_key"="h7fhkzhaia")
plotly:::verify("username")
plotly:::verify("api")
plotly:::verify("api_key")
ploy<-plotly()
?ggplotly
install.packages("Rtools")
install.packages("curl")
library("curl", lib.loc="~/R/win-library/3.2")
require(plotly)
plotly:::verify("api_key")
Sys.setenv("plotly_username"="skosowsky")
Sys.setenv("plotly_api_key"="h7fhkzhaia")
plotly:::verify("api_key")
install.packages(plotly)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
plotly:::verify("api_key")
Sys.setenv("plotly_username"="skosowsky")
Sys.setenv("plotly_api_key"="h7fhkzhaia")
install.packages("viridis")
install.packages("viridis")
install.packages("viridis")
install.packages("viridis")
